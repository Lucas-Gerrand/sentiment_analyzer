<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:camel="http://camel.apache.org/schema/spring"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-2.5.xsd
	http://camel.apache.org/schema/spring
	http://camel.apache.org/schema/spring/camel-spring.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">
	
	<!-- import the routes from another XML file -->
	<import resource="TwitterContext.xml"/>
	<!--<import resource="FacebookContext.xml"/>-->
	
	<!-- this is the JDBC data source which uses an in-memory only Apache Derby database -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="org.apache.derby.jdbc.EmbeddedDriver"/>
		<property name="url" value="jdbc:derby:memory:orders;create=true"/>
		<property name="username" value=""/>
		<property name="password" value=""/>
	</bean>
	
	<!-- setup the Camel hibernate component -->
	<bean id="hibernate" class="org.apacheextras.camel.component.hibernate.HibernateComponent">
		<property name="sessionFactory" ref="sessionFactory"/>
		<property name="transactionStrategy" ref="springTransactionStrategy"/>
	</bean>

	<!-- setup hibernate and spring to use transaction -->
		<bean id="springTransactionStrategy" class="org.apacheextras.camel.component.hibernate.SpringTransactionStrategy">
		<constructor-arg ref="sessionFactory"/>
		<constructor-arg ref="transactionTemplate"/>
	</bean>
	
	<bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	
	<bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
		<property name="transactionManager" ref="transactionManager"/>
	</bean>
	
	<bean id="fooBean" class="at.tuwien.sentimentanalyzer.beans.FooBean"/>
	
	<!-- setup Hibernate session factory -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<!-- here we define the hibernate mapping files we use -->
		<property name="mappingResources">
			<list>
				<value>Foo.hbm.xml</value>
			</list>
		</property>
		<!-- and here we have additional hibernate options -->
		<property name="hibernateProperties">
			<value>
				hibernate.dialect=org.hibernate.dialect.DerbyTenSevenDialect
				hibernate.hbm2ddl.auto=create
			</value>
		</property>
	</bean>
	
	<tx:annotation-driven />
	
	<camelContext xmlns="http://camel.apache.org/schema/spring">
		<!-- incoming requests from the servlet is routed -->
		<!--<routeContextRef ref="TwitterRoutes"/>-->
		<!--<routeContextRef ref="FacebookRoutes"/>-->
		
		<route>
			<!-- incoming requests from the servlet is routed -->
			<from uri="servlet:///hello"/>
			<choice>
				<when>
					<!-- is there a header with the key name? -->
					<header>name</header>
					<!-- yes so return back a message to the user -->
					<transform>
						<simple>Hello ${header.name} how are you?</simple>
						
						
					</transform>
				</when>
				<otherwise>
					<!-- if no name parameter then output a syntax to the user -->
					<transform>
						<constant>Add a name parameter to uri, eg ?name=foo</constant>
					</transform>
				</otherwise>
			</choice>
			<to uri="smtps://smtp.gmail.com:465?password=wmpmSS2014&amp;username=workflow@applepublic.tv">
			</to>
		</route>

		<route id="generateFoo-route">
			<from uri="timer:foo?period=20s"/>
			<transform>
				<method ref="fooBean" method="generateFoo"/>
			</transform>
			<to uri="hibernate:at.tuwien.sentimentanalyzer.entities.Foo"/>
			<log message="Inserted new foo ${body.id}"/>
		</route>

		<!-- route that process the foos by picking up new rows from the database
		and when done processing then update the row to mark it as processed -->
		<route id="processFoo-route">
			<from uri="hibernate:at.tuwien.sentimentanalyzer.entities.Foo?delay=1s"/>
			<to uri="bean:fooBean?method=processFoo"/>
			<log message="${body}"/>
		</route>
		
		<route id="facebookSearchPlachutta">
			<from uri="timer:foo?period=20s"/>
			<!--<to uri="https://graph.facebook.com/v2.0//me?fields=id,name&amp;access_token=CAAErrkh9eZCIBAEulU3syZARyzRcBZCwZBUChxyVDXrJ6etyXtgM16lvxF23sT62sdhzE3FGbEYQCWuBAt5xHOq00WdHN2Kt5RvpGOW1ZB8Azpd3ZC5i2uJ9488fZBnUgfkGOGdcEZCVripEMXjSvbK6L8ZADbXUUwYY6ryibVTYHuawx5swa4NJajEGMTCBSPuwZD" />-->
			<to uri="https://graph.facebook.com/v2.0//123939137654782/feed?access_token=CAAErrkh9eZCIBAEulU3syZARyzRcBZCwZBUChxyVDXrJ6etyXtgM16lvxF23sT62sdhzE3FGbEYQCWuBAt5xHOq00WdHN2Kt5RvpGOW1ZB8Azpd3ZC5i2uJ9488fZBnUgfkGOGdcEZCVripEMXjSvbK6L8ZADbXUUwYY6ryibVTYHuawx5swa4NJajEGMTCBSPuwZD" />
			<convertBodyTo type="java.lang.String" />
			<to uri="log:facebook" /> 		        
        </route>


	</camelContext>

	<camel:sslContextParameters id="sslContextParameters">
		<camel:trustManagers>
			<camel:keyStore resource="/users/home/server/truststore.jks" password="keystorePassword"/>
			</camel:trustManagers>
		</camel:sslContextParameters>
	<bean id="testProcessor" class="at.tuwien.sentimentanalyzer.sample.TestProcessor"/>

</beans>